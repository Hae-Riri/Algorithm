#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int number = 6;
int INF = 10000000;

vector<pair<int, int>> a[7];//1부터 7
int d[7]; //최소비용

int dijkstra(int start) {
	
	d[start] = 0;
	priority_queue<pair<int, int>> pq;
	pq.push(make_pair(start, 0));
	while (!pq.empty()) {
		int current = pq.top().first;
		int distance = - pq.top().second;
		pq.pop();
		if (distance > d[current]) continue;

		for (int i = 0; a[current].size(); i++) {
			int next = a[current][i].first;
			int nextDistance = distance + a[current][i].second;
			if (nextDistance < d[next]) {
				d[next] = nextDistance;
				pq.push(make_pair(next, -nextDistance));
			}
		}
	}
}

int main() {
	for (int i = 1; i <= number; i++) {
		d[i] = INF;
	}
	a[1].push_back(make_pair(2,2));//1 -> 2의 거리 2
	a[1].push_back({ 3,5 });
	a[1].push_back({ 4,1 });

	a[2].push_back({ 1,2 });
	a[2].push_back({ 3,3 });
	a[2].push_back({ 4,2 });

	a[3].push_back({ 1,5});
	a[3].push_back({ 2,3 });
	a[3].push_back({ 4,3 });
	a[3].push_back({ 5,1 });
	a[3].push_back({ 6,5 });

	a[4].push_back({1,1});
	a[4].push_back({ 2,2 });
	a[4].push_back({ 3,3});
	a[4].push_back({ 5,1 });

	a[5].push_back({ 3,1 });
	a[5].push_back({ 4,1 });
	a[5].push_back({ 6,2 });

	a[6].push_back({ 3,5 });
	a[6].push_back({ 5,2 });

	dijkstra(1);

	for (int i = 1; i <= number; i++) {
		printf("%d", d[i]);
	}
}